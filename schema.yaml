openapi: 3.0.0
info:
  title: Meme API
  description: API for creating, rating, and listing memes.
  version: 1.0.0

servers:
  - url: http://localhost:8080

security:
  - BearerAuth: []

paths:
  /api/register/:
    post:
      summary: Register a new user
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUser'
      responses:
        '201':
          description: User registered successfully
        '400':
          description: Email already exists or passwords do not match
      security: []
  /api/token/:
    post:
      summary: Obtain token pair
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginUser'
      responses:
        '200':
          description: Token pair obtained successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenPair'
        '400':
          description: Bad request
        '401':
          description: Invalid credentials
      security: []
  /api/token/refresh/:
    post:
      summary: Refresh an access token
      tags:
        - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '200':
          description: Access token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefreshTokenResponse'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
      security: []
  /api/templates/:
    get:
      summary: List all meme templates
      tags:
        - api
      responses:
        '200':
          description: A list of meme templates
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MemeTemplate'
        '401':
          description: Unauthorized
  /api/memes/:
    get:
      summary: List all memes (with pagination)
      tags:
        - api
      parameters:
        - name: page
          in: query
          required: false
          style: simple
          explode: false
          schema:
            type: integer
            default: 1
      responses:
        '200':
          description: A list of memes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MemesPaginatedResponse'
        '401':
          description: Unauthorized
        '404':
          description: Page not found
    post:
      summary: Create a new meme
      tags:
        - api
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MemeCreate'
      responses:
        '201':
          description: Meme created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
        '400':
          description: Incorrect template id
        '401':
          description: Unauthorized
  /api/memes/{id}/:
    get:
      summary: Retrieve a specific meme
      tags:
        - api
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Details of a specific meme
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Meme'
        '401':
          description: Unauthorized
  /api/memes/{id}/rate/:
    post:
      summary: Rate a meme
      tags:
        - api
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RatingCreate'
      responses:
        '200':
          description: Meme rated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rating'
        '401':
          description: Unauthorized
  /api/memes/random/:
    get:
      summary: Get a random meme
      tags:
        - api
      responses:
        '200':
          description: A random meme
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Meme'
        '401':
          description: Unauthorized
  /api/memes/top/:
    get:
      summary: Get top 10 rated memes
      tags:
        - api
      responses:
        '200':
          description: Top 10 memes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Meme'
        '401':
          description: Unauthorized

components:
  schemas:
    RegisterUser:
      required:
        - email
        - password_1
        - password_2
      type: object
      properties:
        email:
          type: string
          example: test@example.com
        password_1:
          type: string
          example: Ll123123&&
        password_2:
          type: string
          example: Ll123123&&
    LoginUser:
      required:
        - email
        - password
      type: object
      properties:
        email:
          type: string
          example: test@example.com
        password:
          type: string
          example: Ll123123&&
    TokenPair:
      required:
        - access
        - refresh
      type: object
      properties:
        access:
          type: string
          example: >-
            eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
        refresh:
          type: string
          example: hxBi4vwx9smFeDEpL4qegxPivFENlPQGsVtmseMODgQqfppT56T9LMke6YmeVV1k
    RefreshTokenRequest:
      required:
        - refresh
      type: object
      properties:
        refresh_token:
          type: string
          example: hxBi4vwx9smFeDEpL4qegxPivFENlPQGsVtmseMODgQqfppT56T9LMke6YmeVV1k
    RefreshTokenResponse:
      required:
        - access
      type: object
      properties:
        access_token:
          type: string
          example: >-
            eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
      example:
        access_token: >-
          eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
    MemeTemplate:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: test template
        image_url:
          type: string
          format: url
          example: 'https://example.com/image.jpg'
        default_top_text:
          type: string
          example: Default top text
        default_bottom_text:
          type: string
          example: Default bottom text
    ShortUser:
      type: object
      properties:
        id:
          type: integer
          example: 1
        email:
          type: string
          example: test@example.com
    MemesPaginatedResponse:
      type: object
      properties:
        count:
          type: integer
          example: 3
        next:
          type: string
          format: url
        previous:
          type: string
          format: url
        results:
          type: array
          items:
            $ref: '#/components/schemas/Meme'
    Meme:
      type: object
      properties:
        id:
          type: integer
          example: 1
        template:
          $ref: '#/components/schemas/MemeTemplate'
        top_text:
          type: string
          example: Top text
        bottom_text:
          type: string
          example: Bottom text
        created_by:
          $ref: '#/components/schemas/ShortUser'
        created_at:
          type: string
          format: date-time
          example: '2024-03-15T10:00:00'
    MemeCreate:
      type: object
      properties:
        template_id:
          type: integer
          example: 1
        top_text:
          type: string
          example: Top text
        bottom_text:
          type: string
          example: Bottom text
    Rating:
      type: object
      properties:
        id:
          type: integer
        meme:
          $ref: '#/components/schemas/Meme'
        user:
          $ref: '#/components/schemas/User'
        score:
          type: integer
          enum:
            - 1
            - 2
            - 3
            - 4
            - 5
        created_at:
          type: string
          format: date-time
    RatingCreate:
      type: object
      properties:
        score:
          type: integer
          enum:
            - 1
            - 2
            - 3
            - 4
            - 5

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
